{"version":3,"sources":["components/Navbar.js","components/Form.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","href","title","type","id","nav1","nav2","placeholder","prototype","PropTypes","string","isRequired","Form","useState","text","setText","heading","value","rows","onChange","event","target","onClick","newText","toUpperCase","toLocaleLowerCase","length","split","About","color","backgroundColor","borderRadius","style","setstyle","BtnText","setBtnText","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ced607c8.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">{props.nav1}</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">{props.nav2}</a>\r\n              </li>\r\n            </ul>\r\n            <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.prototype = {\r\n    title: PropTypes.string.isRequired,\r\n    nav1: PropTypes.string\r\n}","import React, { useState } from 'react';\r\n\r\n\r\nexport default function Form(props) {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        let newText = text.toLocaleLowerCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handleClClick = () => {\r\n        setText('');\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"mb-3\">\r\n                    <h1>{props.heading}</h1>\r\n                    <textarea className=\"form-control\" value={text} id=\"box\" rows=\"8\" onChange={handleOnChange} placeholder=\"Enter Text Here\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleUpClick}>Convert to upper case</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to lower case</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClClick}>Clear</button>\r\n            </div>\r\n\r\n            <div className=\"container my-2\">\r\n                <h2>You text summary</h2>\r\n                <p>{text.length} characters and {text.split(\" \").length} words</p>\r\n                <p>{0.008 * text.split(\" \").length} word will take minutes to read for an average person</p>\r\n\r\n                {/* preview */}\r\n                <h2>Preview</h2>\r\n                <p>{text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [style, setstyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n        borderRadius: '10px',\r\n    })\r\n\r\n    const [BtnText, setBtnText] = useState('Enable Dark Mode')\r\n\r\n    const toggleStyle = () => {\r\n        if (style.color === 'black') {\r\n            setstyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                borderRadius: '10px',\r\n            })\r\n\r\n            setBtnText('Disable Dark Mode');\r\n        } else {\r\n            setstyle({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n                borderRadius: '10px',\r\n            })\r\n            \r\n            setBtnText('Enable Dark Mode');\r\n        }\r\n    }\r\n\r\n\r\n    // let underStyle = {\r\n    //     color: 'white',\r\n    //     backgroundColor: 'grey',\r\n    // }\r\n\r\n    return (\r\n        <div className=\"container\" style={style}>\r\n            <h1>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={style} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" style={style} aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via style transitions. You can modify any of this with custom style or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={style} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" style={style} aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via style transitions. You can modify any of this with custom style or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" >\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={style} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" style={style} aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via style transitions. You can modify any of this with custom style or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={toggleStyle}>{BtnText}</button>\r\n            </div>\r\n            <br />\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Form from './components/Form';\nimport About from './components/About';\n\nfunction App() {\n  return (\n    <>\n      <Navbar title=\"React-App\" nav1=\"Home\" nav2=\"About Us\" />\n\n      <div className=\"container my-3\">\n        <Form heading=\"Enter the text to analyze\" />\n      </div>\n\n      <About/>\n      <br /><br />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}